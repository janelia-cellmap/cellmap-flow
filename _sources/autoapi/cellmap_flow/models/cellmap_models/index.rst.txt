cellmap_flow.models.cellmap_models
==================================

.. py:module:: cellmap_flow.models.cellmap_models


Attributes
----------

.. autoapisummary::

   cellmap_flow.models.cellmap_models.ort
   cellmap_flow.models.cellmap_models.torch


Classes
-------

.. autoapisummary::

   cellmap_flow.models.cellmap_models.ModelMetadata
   cellmap_flow.models.cellmap_models.CellmapModel
   cellmap_flow.models.cellmap_models.CellmapModels


Module Contents
---------------

.. py:data:: ort
   :value: None


.. py:data:: torch
   :value: None


.. py:class:: ModelMetadata(/, **data: Any)



   !!! abstract "Usage Documentation"
       [Models](../concepts/models.md)

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of the class variables defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The core schema of the model.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a [`RootModel`][pydantic.root_model.RootModel].

   .. attribute:: __pydantic_serializer__

      The `pydantic-core` `SchemaSerializer` used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The `pydantic-core` `SchemaValidator` used to validate instances of the model.

   .. attribute:: __pydantic_fields__

      A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.

   .. attribute:: __pydantic_computed_fields__

      A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

   .. attribute:: __pydantic_extra__

      A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
      is set to `'allow'`.

   .. attribute:: __pydantic_fields_set__

      The names of fields explicitly set during instantiation.

   .. attribute:: __pydantic_private__

      Values of private attributes set on the model instance.


   .. py:attribute:: model_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: model_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: framework
      :type:  Optional[str]
      :value: None



   .. py:attribute:: spatial_dims
      :type:  Optional[int]
      :value: None



   .. py:attribute:: in_channels
      :type:  Optional[int]
      :value: None



   .. py:attribute:: out_channels
      :type:  Optional[int]
      :value: None



   .. py:attribute:: iteration
      :type:  Optional[int]
      :value: None



   .. py:attribute:: input_voxel_size
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: output_voxel_size
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: channels_names
      :type:  Optional[List[str]]
      :value: None



   .. py:attribute:: input_shape
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: output_shape
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: inference_input_shape
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: inference_output_shape
      :type:  Optional[List[int]]
      :value: None



   .. py:attribute:: author
      :type:  Optional[str]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: None



   .. py:attribute:: version
      :type:  Optional[str]
      :value: None



.. py:class:: CellmapModel(folder_path: str)

   Represents a single model directory.
   Lazily loads:
     - metadata.json --> pydantic ModelMetadata
     - model.onnx    --> ONNX model session (if onnxruntime is available)
     - model.pt      --> PyTorch model (if torch is available)
     - model.ts      --> TorchScript model (if torch is available)
     - README.md      --> str


   .. py:attribute:: folder_path


   .. py:property:: metadata
      :type: ModelMetadata


      Lazy load the metadata.json file and parse it into a ModelMetadata object.


   .. py:property:: onnx_model

      If 'model.onnx' exists, lazily load it as an ONNX Runtime InferenceSession.
      Use GPU if available (requires onnxruntime-gpu installed), otherwise CPU.
      Returns None if the file doesn't exist or onnxruntime isn't installed.


   .. py:property:: pytorch_model

      If 'model.pt' exists, lazily load it using torch.load().
      Returns None if the file doesn't exist or PyTorch isn't installed.

      NOTE: Adjust this for how your .pt was saved (entire model vs state_dict).


   .. py:property:: ts_model

      If 'model.ts' exists, lazily load it using torch.jit.load().
      Returns None if the file doesn't exist or PyTorch isn't installed.


   .. py:property:: readme
      :type: Optional[str]


      Lazy load the README.md content if it exists, else None.


.. py:class:: CellmapModels(root_dir: str)

   A container that discovers all subfolders in the given directory
   and provides them as model attributes.


   .. py:attribute:: root_dir


   .. py:method:: list_models() -> List[str]

      Returns the list of detected model names (subfolder names
      that contain 'metadata.json').



